---

---


<div class="text-center">
    <h1>Hls.js 播放base64视频</h1>
    <video class="w-full" id="video" controls />
</div>
<script src="https://fastly.jsdelivr.net/npm/swarmcloud-hls@latest/dist/hls.min.js"></script>
<script type="module" is:inline>
    const fetchM3u8 = async (url = '' ) => {
        url = url || 'https://s5.bfzycdn.com/video/lanman/第76集/index.m3u8';
        // url = `https://faas-sgp1-18bc02ac.doserverless.co/api/v1/web/fn-41e9df6e-4d4b-4032-8fb2-e91907859969/default/cors-php?`+url
        const m3u8proxy = `https://cloud.yepcode.io/api/dgjx/webhooks/10b27730-e1be-42d4-abef-209a9df9a927?`
        // const proxy = 'https://hono.dgcf.link'
        const proxy = 'https://esm.sctes.stevie.top'
        let res = await fetch(m3u8proxy + url)
            .then(r => r.text());

        const contentType = 'application/vnd.apple.mpegurl'
        res = res
            .replace(/#EXT-X-DIS[\s\S]+?SCONTINUITY\n/g, '')
            .replace(/(\n)https?:\//g, `$1${encodeURI(proxy)}`)
            .replace(/(\n)(\w+.ts)/g, `$1${encodeURI(url.replace(/\w+.m3u8/, ''))}$2`)
        console.log('m3u8:', res)
        return 'data:' + [contentType, btoa(res)].join(';base64,')
    }
    // fetchM3u8()

    const search = new URLSearchParams(location.search.substring(1))
    const playerHlsjs = async (src = '') => {
        src = 'https://s5.bfzycdn.com/video/changansanwanli/HD/index.m3u8'
        // src = 'https://vip.kuaikan-cdn3.com/20230406/gaVwdnYY/index.m3u8'
        const proxy = `https://faas-sgp1-18bc02ac.doserverless.co/api/v1/web/fn-41e9df6e-4d4b-4032-8fb2-e91907859969/default/cors-php`
        // const proxy = 'https://esm.sctes.stevie.top'
        // const proxy = 'https://s.stevie.top'
        // const proxy = 'https://hono.dgcf.link'
        src = proxy + '/' + btoa(src.replace('https://', ''));
        if(/^https?:/.test(search.get('src'))) src = search.get('src')
        // src = await fetchM3u8()
        const video = document.getElementById('video');
        const p2pConfig = {
            // logLevel: 'debug',
            token: 'Ta-XNIdZg',
            trackerZone: 'hk',
            swFile: '/p2p-sw.js'
        }
        if (Hls.isSupported()) {
            const hls = new Hls({
                // debug: true,
                // maxBufferLength: 120,
                // maxMaxBufferLength: 600,
                p2pConfig,
                xhrSetup: xhr => {
                    // xhr.setRequestHeader('X-Space-App-Key', 'uBWrgGMKuog6ioDbhvj9wmc1MMt6ByyW')
                }
            });
            hls.loadSource(src);
            hls.attachMedia(video);
            hls.on(Hls.Events.MEDIA_ATTACHED,  () => {
                // video.muted = true;
                // video.play();
            });
        }
            // hls.js 在未启用媒体源扩展 （MSE） 的平台上不受支持。
            // 当浏览器具有内置的 HLS 支持（使用 'canPlayType' 进行检查）时，我们可以通过 'src' 属性直接向视频元素提供 HLS 清单（即 .m3u8 URL）。
        // 这是使用纯视频元素的内置支持，而不使用 hls.js。
        // else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        //     video.src = src;
        //     video.addEventListener('canplay', () => {
        //         // video.play();
        //     });
        // }
        else{
            new Hls.P2pEngine(p2pConfig);
        }
    }
    playerHlsjs()
</script>
