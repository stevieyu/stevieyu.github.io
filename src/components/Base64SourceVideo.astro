---

---

<div class="text-center">
    <h1>Hls.js 播放base64视频</h1>
    <video height="600" id="video" controls></video>
</div>
<script type="module">
    const fetchM3u8 = async (url = '' ) => {
        if(!url) url = 'https://s5.bfzycdn.com/video/moxindiliugan/第12集/index.m3u8';
        const res = await fetch(`https://faas-sgp1-18bc02ac.doserverless.co/api/v1/web/fn-41e9df6e-4d4b-4032-8fb2-e91907859969/sample/hello?`+url)
            .then(r => r.text());
        const m3u8 = atob(res.replace(/[^64,]+64,(.*)/, '$1'))
            .replace(/#EXT-X-DIS[\s\S]+?SCONTINUITY\n/g, '')
            .replace(/(\n)(\w+.ts)/g, `$1${encodeURI(url.replace(/\w+.m3u8/, ''))}$2`)
        return res.replace(/([^64,]+64,).*/, '$1') + btoa(m3u8)
    }
    // fetchM3u8()

    import Hls from 'https://esm.sh/hls.js@1.4.12'
    const player = async (src = '') => {
        // src = 'https://s5.bfzycdn.com/video/moxindiliugan/第12集/index.m3u8'
        src = await fetchM3u8()
        const video = document.getElementById('video');
        if (Hls.isSupported()) {
            const hls = new Hls({
                // debug: true,
            });
            hls.loadSource(src);
            hls.attachMedia(video);
            hls.on(Hls.Events.MEDIA_ATTACHED,  () => {
                // video.muted = true;
                // video.play();
            });
        }
            // hls.js 在未启用媒体源扩展 （MSE） 的平台上不受支持。
            // 当浏览器具有内置的 HLS 支持（使用 'canPlayType' 进行检查）时，我们可以通过 'src' 属性直接向视频元素提供 HLS 清单（即 .m3u8 URL）。
        // 这是使用纯视频元素的内置支持，而不使用 hls.js。
        else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = src;
            video.addEventListener('canplay', () => {
                // video.play();
            });
        }
    }
    player()


</script>
